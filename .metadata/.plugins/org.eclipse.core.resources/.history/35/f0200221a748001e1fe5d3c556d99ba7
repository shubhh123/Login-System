package com.example.demo.services;

import java.util.HashSet;
import java.util.Set;

import javax.naming.AuthenticationException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.demo.model.ApplicationUser;
import com.example.demo.model.LoginResponseDTO;
import com.example.demo.model.Role;
import com.example.demo.repository.RoleRepository;
import com.example.demo.repository.UserRepository;



@Service
@Transactional
public class AuthenticationService {

	private UserRepository userRepository;
	//Whenever we create a user, we also want to attach roles to it.
	private RoleRepository roleRepository;
	private PasswordEncoder passwordEncoder;
	
	
	//This picks up an instance of AuthenticationManager which we set up inside our configuration
	private AuthenticationManager authManager;
	
	private TokenService tokenService;
	
	@Autowired
	public AuthenticationService(UserRepository userRepository, RoleRepository roleRepository, PasswordEncoder passwordEncoder, AuthenticationManager authManager,
			TokenService tokenService) {
		this.userRepository = userRepository;
		this.roleRepository = roleRepository;
		this.passwordEncoder = passwordEncoder;
		this.authManager = authManager;
		this.tokenService = tokenService;
	}
	
	
	//This way our ApplicationUser will be saved in the database, any time when username and password is passed in.
	public ApplicationUser registerUser(String username, String password) {
		
		String encodedPassword = passwordEncoder.encode(password);
		Role userRole = roleRepository.findByAuthority("USER").get();
		
		Set<Role> authorities = new HashSet<Role>();
		
		authorities.add(userRole);
		return userRepository.save(new ApplicationUser(0, username, encodedPassword, authorities));
	}
	
	
	/*
	 * This method takes in the authentication manager, looks for user-name and password,
	 * validates them, generates an authentication token, sends that over to TokenService
	 * then returns
	 */
	public LoginResponseDTO loginUser(String username, String password) {
		
		/*
		 * Whenever we send in a request for login, it gets the uer-name and password and passes it to the authentication manager
		 * then uses the UserDetails service, grabs the user. and validates.
		 */
		
		try {
			
			Authentication auth = authManager.authenticate(
						new UsernamePasswordAuthenticationToken(username, password)
					);
			String token = tokenService.generateJwtToken(auth);
			
			return new LoginResponseDTO(userRepository.findByUsername(username).get(), token);		
			
		}catch (Exception e) {
			return new LoginResponseDTO(null, "jwt");
		}
		
		
	}
}
