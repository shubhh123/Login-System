package com.example.demo.services;

import java.time.Instant;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.oauth2.jwt.JwtClaimsSet;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.stereotype.Service;

/*
 * Service to generate JWT tokens
 */


@Service
public class TokenService {

	
	private JwtEncoder jwtEncoder;
	private JwtDecoder jwtDecoder;
	
	@Autowired
	public TokenService(JwtEncoder jwtEncoder, JwtDecoder jwtDecoder) {
		this.jwtDecoder = jwtDecoder;
		this.jwtEncoder = jwtEncoder;
	}
	
	
	//The Authentication object is provided by sprig security
	//auth has all the roles from the user
	public String generateJwtToken(Authentication auth) {
		
		Instant now = Instant.now();  //This will get us an instant of the current time
		
		
		/*
		 * 1. auth.getAuthorities(): This method is used to retrieve the authorities (or roles) 
		 * associated with the authenticated user. In Spring Security, these authorities are 
		 * often represented as a collection of GrantedAuthority objects.
		 * 
		 * 2..map(GrantedAuthority::getAuthority): This maps each GrantedAuthority object to its 
		 * authority string representation. The getAuthority method is used to obtain the authority 
		 * name as a string.
		 * 
		 * 3. .collect(Collectors.joining(" ")): Finally, this code collects the authority strings 
		 * into a single string by joining them together with spaces in between. The " " argument 
		 * passed to Collectors.joining(" ") specifies that a space character should be used as 
		 * the delimiter between the authority strings.
		 * 
		 * 
		 * The code takes the authorities (or roles) associated with the authenticated user and concatenates 
		 * them into a space-separated string. So, if the user has authorities like "USERS" and "ADMIN," 
		 * the resulting scope string would look like "USERS ADMIN". Each authority is separated by a space, 
		 * making it easy to include this information as a claim within a JWT token or use it for other 
		 * authorization-related purposes.
		 */
		
		String scope = auth.getAuthorities().stream()
					.map(GrantedAuthority::getAuthority)
					.collect(Collectors.joining(" "));
		
		//Here we initialize Jwt claim set.
		//It represents the information held by JWT
		JwtClaimsSet claims = JwtClaimsSet.builder()
								.issuer("self")
								.issuedAt(now)
								
								//This is the person to whom the jwt will be issued
								.subject(auth.getName())
								.claim("rolse", scope)
								.build();
		
		//Now use the Jwt encoder to build the jwt token
								
		
		return "";
	}
}
